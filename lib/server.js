// Generated by CoffeeScript 1.7.1
(function() {
  "user strict";
  var Room, Server, events, util;

  util = require("util");

  events = require("events");

  Room = require("./room");

  Server = function(options) {
    var redisOptions, serverSubscribeChannelName, _createRoom;
    options = options || {};
    redisOptions = options.redis || null;
    if (!redisOptions) {
      redisOptions = {
        client: null,
        sub: null,
        pub: null
      };
    }
    this.clientRedis = redisOptions.client;
    this.subRedis = redisOptions.sub;
    this.pubRedis = redisOptions.pub;
    serverSubscribeChannelName = "rsocket_vent";
    this.rooms = {
      "": {}
    };
    this.MSG_TYPES = {
      'ROOM_EMIT': 1,
      'SOCKET_EMIT': 2,
      'SOCKET_REMOVE_FROM_ROOM': 3,
      'SOCKET_REMOVE_FROM_ROOMS': 4,
      'SOCKET_LEAVE_ROOM_BY_REG': 5,
      'SOCKET_ADD_TO_ROOM': 6
    };
    this.sockets = {
      getClients: (function(_this) {
        return function(roomName, cb) {
          return _this.clientRedis.smembers("room:" + roomName, cb);
        };
      })(this),
      "in": (function(_this) {
        return function(roomName) {
          var room;
          room = _this.rooms[roomName];
          if (!room) {
            room = _createRoom(roomName);
          }
          return room;
        };
      })(this),
      removeSocketFromRoom: (function(_this) {
        return function(socketId, room) {
          return _this.sendMessage(_this.MSG_TYPES.SOCKET_REMOVE_FROM_ROOM, {
            socket: socketId,
            room: room
          });
        };
      })(this),
      removeSocketFromRooms: (function(_this) {
        return function(socketId, rooms) {
          return _this.sendMessage(_this.MSG_TYPES.SOCKET_REMOVE_FROM_ROOMS, {
            socket: socketId,
            rooms: rooms
          });
        };
      })(this),
      emitTo: (function(_this) {
        return function(socketId, label, data) {
          return _this.sendMessage(_this.MSG_TYPES.SOCKET_EMIT, {
            socket: socketId,
            label: label,
            data: data
          });
        };
      })(this),
      leaveRoomsByReg: (function(_this) {
        return function(socketId, regStr) {
          return _this.sendMessage(_this.MSG_TYPES.SOCKET_LEAVE_ROOM_BY_REG, {
            socket: socketId,
            regStr: regStr
          });
        };
      })(this),
      addSocketToRoom: (function(_this) {
        return function(socketId, room) {
          return _this.sendMessage(_this.MSG_TYPES.SOCKET_ADD_TO_ROOM, {
            socket: socketId,
            room: room
          });
        };
      })(this)
    };
    this.subRedis.subscribe(serverSubscribeChannelName);
    console.log("Socket redis connected to " + this.subRedis.host + ":" + this.subRedis.port);
    this.subRedis.on('message', (function(_this) {
      return function(channel, message) {
        var body, clients, messageData, messageLabel, regStr, room, roomName, rooms, socket, socketId, _i, _len, _results;
        message = JSON.parse(message);
        switch (message.type) {
          case _this.MSG_TYPES.ROOM_EMIT:
            body = message.data;
            roomName = body.room;
            room = _this.rooms[roomName];
            if (!room) {
              return false;
            }
            return clients = room.getClients(function(err, clients) {
              var client, defaultRoom, messageData, messageLabel, socket, _i, _len, _results;
              if (err) {
                throw new Error;
              }
              defaultRoom = _this.rooms[""];
              messageLabel = body.label;
              messageData = body.data;
              _results = [];
              for (_i = 0, _len = clients.length; _i < _len; _i++) {
                client = clients[_i];
                socket = defaultRoom[client];
                if (!socket) {
                  continue;
                }
                _results.push(socket.emit(messageLabel, messageData));
              }
              return _results;
            });
          case _this.MSG_TYPES.SOCKET_EMIT:
            body = message.data;
            socketId = body.socket;
            socket = _this.rooms[""][socketId];
            if (!socket) {
              return false;
            }
            messageLabel = body.label;
            messageData = body.data;
            return socket.emit(messageLabel, messageData);
          case _this.MSG_TYPES.SOCKET_REMOVE_FROM_ROOM:
            body = message.data;
            socketId = body.socket;
            room = body.room;
            return _this.removeFromRoom(socketId, room);
          case _this.MSG_TYPES.SOCKET_REMOVE_FROM_ROOMS:
            body = message.data;
            socketId = body.socket;
            rooms = body.rooms;
            _results = [];
            for (_i = 0, _len = rooms.length; _i < _len; _i++) {
              room = rooms[_i];
              _results.push(_this.removeFromRoom(socketId, room));
            }
            return _results;
            break;
          case _this.MSG_TYPES.SOCKET_LEAVE_ROOM_BY_REG:
            body = message.data;
            socketId = body.socket;
            regStr = body.regStr;
            return _this.leaveRoomByReg(socketId, regStr);
          case _this.MSG_TYPES.SOCKET_ADD_TO_ROOM:
            body = message.data;
            socketId = body.socket;
            roomName = body.room;
            return _this.addSocketToRoom(socketId, roomName);
        }
      };
    })(this));
    this.activateSocket = function(socket, sessionData) {
      return socket._activate(sessionData);
    };
    this.sendMessage = function(type, data) {
      var message;
      message = {
        type: type,
        data: data
      };
      message = JSON.stringify(message);
      return this.pubRedis.publish(serverSubscribeChannelName, message);
    };
    this.addSocket = (function(_this) {
      return function(socket) {
        return _this.rooms[""][socket.id] = socket;
      };
    })(this);
    _createRoom = (function(_this) {
      return function(name) {
        return new Room({
          name: name,
          server: _this
        });
      };
    })(this);
    this.addSocketToRoom = (function(_this) {
      return function(socketId, roomName) {
        var socket;
        socket = _this.rooms[""][socketId];
        if (!socket) {
          return false;
        }
        return _this.addToRoom(socket, roomName);
      };
    })(this);
    this.addToRoom = (function(_this) {
      return function(socket, roomName) {
        var room;
        room = _this.rooms[roomName];
        if (!room) {
          room = _this.rooms[roomName] = _createRoom(roomName);
        }
        return room.add(socket);
      };
    })(this);
    this.removeFromRoom = (function(_this) {
      return function(socket, roomName) {
        var room;
        if (!socket.id) {
          socket = _this.rooms[""][socket];
        }
        if (!socket) {
          return false;
        }
        room = _this.rooms[roomName];
        if (!room) {
          room = _this.rooms[roomName] = _createRoom(roomName);
        }
        return room.remove(socket);
      };
    })(this);
    this.leaveRoomByReg = (function(_this) {
      return function(socketId, regStr) {
        var regExp, socket;
        socket = _this.rooms[""][socketId];
        if (!socket) {
          return false;
        }
        regExp = new RegExp(regStr);
        return socket.leaveByReg(regExp, function(err) {
          if (err) {
            return console.error(err);
          }
        });
      };
    })(this);
    return this;
  };

  util.inherits(Server, events.EventEmitter);

  module.exports = Server;

}).call(this);
