// Generated by CoffeeScript 1.6.1
(function() {
  "user strict";
  var Room, Server, events, util;

  util = require("util");

  events = require("events");

  Room = require("./room");

  Server = function(options) {
    var redisOptions, serverSubscribeChannelName, _createRoom,
      _this = this;
    options = options || {};
    redisOptions = options.redis || null;
    if (!redisOptions) {
      redisOptions = {
        client: null,
        sub: null,
        pub: null
      };
    }
    this.clientRedis = redisOptions.client;
    this.subRedis = redisOptions.sub;
    this.pubRedis = redisOptions.pub;
    serverSubscribeChannelName = "rsocket_vent";
    this.rooms = {
      "": {}
    };
    this.MSG_TYPES = {
      "ROOM_EMIT": 1,
      "SOCKET_EMIT": 2,
      "SOCKET_REMOVE_FROM_ROOM": 3
    };
    this.sockets = {
      getClients: function(roomName, cb) {
        return _this.clientRedis.smembers("room:" + roomName, cb);
      },
      "in": function(roomName) {
        var room;
        room = _this.rooms[roomName];
        if (!room) {
          room = _createRoom(roomName);
        }
        return room;
      },
      removeSocketFromRoom: function(socketId, room) {
        return _this.sendMessage(_this.MSG_TYPES.SOCKET_REMOVE_FROM_ROOM, {
          socket: socketId,
          room: room
        });
      },
      emitTo: function(socketId, label, data) {
        return _this.sendMessage(_this.MSG_TYPES.SOCKET_EMIT, {
          socket: socketId,
          label: label,
          data: data
        });
      }
    };
    this.subRedis.subscribe(serverSubscribeChannelName);
    this.subRedis.on('message', function(channel, message) {
      var body, clients, messageData, messageLabel, room, roomName, socket, socketId;
      message = JSON.parse(message);
      if (message.type === _this.MSG_TYPES.ROOM_EMIT) {
        body = message.data;
        roomName = body.room;
        room = _this.rooms[roomName];
        if (!room) {
          return false;
        }
        clients = room.getClients(function(err, clients) {
          var client, defaultRoom, messageData, messageLabel, socket, _i, _len, _results;
          if (err) {
            throw new Error;
          }
          defaultRoom = _this.rooms[""];
          messageLabel = body.label;
          messageData = body.data;
          _results = [];
          for (_i = 0, _len = clients.length; _i < _len; _i++) {
            client = clients[_i];
            socket = defaultRoom[client];
            if (!socket) {
              continue;
            }
            _results.push(socket.emit(messageLabel, messageData));
          }
          return _results;
        });
      }
      if (message.type === _this.MSG_TYPES.SOCKET_EMIT) {
        body = message.data;
        socketId = body.socket;
        socket = _this.rooms[""][socketId];
        if (!socket) {
          return false;
        }
        messageLabel = body.label;
        messageData = body.data;
        socket.emit(messageLabel, messageData);
      }
      if (message.type === _this.MSG_TYPES.SOCKET_EMIT) {
        body = message.data;
        socketId = body.socket;
        room = body.room;
        return _this.removeFromRoom(socketId, room);
      }
    });
    this.activateSocket = function(socket, sessionData) {
      return socket._activate(sessionData);
    };
    this.sendMessage = function(type, data) {
      var message;
      message = {
        type: type,
        data: data
      };
      message = JSON.stringify(message);
      return this.pubRedis.publish(serverSubscribeChannelName, message);
    };
    this.addSocket = function(socket) {
      return _this.rooms[""][socket.id] = socket;
    };
    _createRoom = function(name) {
      return new Room({
        name: name,
        server: _this
      });
    };
    this.addToRoom = function(socket, roomName) {
      var room;
      room = _this.rooms[roomName];
      if (!room) {
        room = _this.rooms[roomName] = _createRoom(roomName);
      }
      return room.add(socket);
    };
    this.removeFromRoom = function(socket, roomName) {
      var room;
      if (!socket.id) {
        socket = _this.rooms[""][socket];
      }
      if (!socket) {
        return false;
      }
      room = _this.rooms[roomName];
      if (!room) {
        room = _this.rooms[roomName] = _createRoom(roomName);
      }
      return room.remove(socket);
    };
    return this;
  };

  util.inherits(Server, events.EventEmitter);

  module.exports = Server;

}).call(this);
